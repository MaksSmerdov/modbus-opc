import { Device, Tag } from '../models/settings/index.js';

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –ë–î —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
 * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ—Ä—Ç–∞–º–∏ –∏ —Ç—ç–≥–∞–º–∏
 */
export async function loadDevicesFromDB() {
  try {
    const devices = await Device.find({ isActive: true })
      .populate({
        path: 'portId',
        match: { isActive: true } // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ—Ä—Ç –∞–∫—Ç–∏–≤–µ–Ω
      })
      .lean();

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${devices.length}`);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, —É–¥–æ–±–Ω—ã–π –¥–ª—è ModbusManager
    const formattedDevices = await Promise.all(
      devices.map(async (device) => {
        const port = device.portId;

        if (!port) {
          console.warn(`‚ö† –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${device.name} (ID: ${device._id}) –ø—Ä–æ–ø—É—â–µ–Ω–æ: –ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω`);
          console.warn(`   –ü—Ä–∏—á–∏–Ω–∞: port=${port}, device.isActive=${device.isActive}`);
          return null;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—ç–≥–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        const tags = await Tag.find({ deviceId: device._id }).lean();

        if (tags.length === 0) {
          console.warn(`‚ö† –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${device.name} –ø—Ä–æ–ø—É—â–µ–Ω–æ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç—ç–≥–∏`);
          return null;
        }

        return {
          name: device.name,
          slaveId: device.slaveId,
          port: {
            connectionType: port.connectionType,
            // RTU –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            port: port.port,
            baudRate: port.baudRate,
            dataBits: port.dataBits,
            stopBits: port.stopBits,
            parity: port.parity,
            // TCP –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            host: port.host,
            tcpPort: port.tcpPort,
            // –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            timeout: port.timeout,
            retries: port.retries
          },
          registers: tags.map(tag => ({
            address: tag.address,
            length: tag.length,
            name: tag.name,
            category: tag.category,
            functionCode: tag.functionCode,
            dataType: tag.dataType,
            bitIndex: tag.bitIndex,
            byteOrder: tag.byteOrder,
            scale: tag.scale,
            offset: tag.offset,
            decimals: tag.decimals,
            unit: tag.unit,
            minValue: tag.minValue,
            maxValue: tag.maxValue,
            description: tag.description
          })),
          saveInterval: device.saveInterval,
          logData: device.logData
        };
      })
    );

    return formattedDevices.filter(device => device !== null);
  } catch (error) {
    console.error('‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ –ë–î:', error.message);
    throw error;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –ë–î
 * @returns {Promise<boolean>} true –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
 */
export async function hasDevicesInDB() {
  try {
    const count = await Device.countDocuments();
    return count > 0;
  } catch (error) {
    console.error('‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –ë–î:', error.message);
    return false;
  }
}

