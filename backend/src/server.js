import express from 'express';
import cors from 'cors';
import swaggerUi from 'swagger-ui-express';
import { config } from './config/env.js';
import connectDB from './utils/database.js';
import { initModbus } from './services/modbusInit.js';
import apiRouter, { setModbusManager } from './routes/index.js';
import { setReinitializeFunction } from './utils/modbusReloader.js';
import { swaggerSpec } from './config/swagger.js';
import { getServerSettings } from './models/settings/index.js';

const app = express();
const { port, host } = config.server;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
void connectDB();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Modbus
let modbusManager = null;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É
export function getModbusManager() {
  return modbusManager;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Modbus
async function reinitializeModbusInternal() {
  try {
    console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Modbus Manager...');

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    if (modbusManager) {
      await modbusManager.disconnect();
      modbusManager = null;
    }

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    modbusManager = await initModbus();
    setModbusManager(modbusManager);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –∏–∑ –ë–î
    if (modbusManager) {
      const settings = await getServerSettings();
      if (settings.isPollingEnabled) {
        if (!modbusManager.isPolling) {
          modbusManager.startPolling();
          console.log('‚úì –û–ø—Ä–æ—Å –∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å –≤–∫–ª—é—á–µ–Ω)');
        }
      } else {
        console.log('‚è∏ –û–ø—Ä–æ—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å –≤—ã–∫–ª—é—á–µ–Ω)');
      }
    }

    console.log('‚úì Modbus Manager —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω');
    return true;
  } catch (error) {
    console.error('‚úó –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Modbus:', error.message);
    return false;
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
setReinitializeFunction(reinitializeModbusInternal);

// –ó–∞–ø—É—Å–∫–∞–µ–º Modbus –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
setTimeout(async () => {
  try {
    modbusManager = await initModbus();
    setModbusManager(modbusManager);

    // –ß–∏—Ç–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –∏–∑ –ë–î –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
    if (modbusManager) {
      const settings = await getServerSettings();
      if (settings.isPollingEnabled && !modbusManager.isPolling) {
        modbusManager.startPolling();
        console.log('‚úì –û–ø—Ä–æ—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—â–µ–Ω (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ë–î: –≤–∫–ª—é—á–µ–Ω–æ)');
      } else if (!settings.isPollingEnabled && modbusManager.isPolling) {
        modbusManager.stopPolling();
        console.log('‚è∏ –û–ø—Ä–æ—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ë–î: –≤—ã–∫–ª—é—á–µ–Ω–æ)');
      }
    }
  } catch (error) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Modbus');
  }
}, 1000);

// Middleware
// CORS - —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –ª—é–±—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
app.use(cors({
  origin: config.env === 'development' ? '*' : ['http://localhost:5173', 'http://localhost:3000'],
  credentials: true,
}));

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec, {
  customCss: '.swagger-ui .topbar { display: none }',
  customSiteTitle: 'Modbus OPC Server API Documentation',
}));

// –ë–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
  res.json({
    message: 'Modbus OPC Server is running',
    environment: config.env,
    host: host,
    port: port,
    documentation: `http://${host}:${port}/api-docs`
  });
});

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ API —Ä–æ—É—Ç—ã
app.use('/api', apiRouter);

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, host, () => {
  console.log(`‚úì API –¥–æ—Å—Ç—É–ø–µ–Ω:`);
  console.log(`  - Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://${host}:${port}/api-docs`);
  console.log(`  - –î–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: http://${host}:${port}/api/data/devices`);
  console.log(`  - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: http://${host}:${port}/api/config`);
});

// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
process.on('SIGINT', async () => {
  console.log('\n\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  if (modbusManager) {
    await modbusManager.disconnect();
  }
  process.exit(0);
});