/**
 * Битовые регистры статусов и аварий котла
 * 
 * Регистр 0x0000 (адрес 0):
 * - Биты 0-12:  Аварии (alarmsMap) → категория 'alarms'
 * - Биты 13-15: Доп. информация (extraInfoMap) → категория 'info'
 * 
 * Регистр 0x0001 (адрес 1):
 * - Биты 0-9:   Информация (infoMap) → категория 'info'
 *
 */

// Карта аварий - регистр 0x0000, биты 0-12, категория 'alarms'
export const alarmsMap = {
  'Уровень высок': 0,
  'Уровень низок': 1,
  'Разрежение мало': 2,
  'Давление воздуха низко': 3,
  'Давление газа низко': 4,
  'Давление газа высоко': 5,
  'Факел горелки погас': 6,
  'Дымосос отключен': 7,
  'Останов по команде': 8,
  'Давление пара высоко': 9,
  'Ложное срабатывание датчика пламени': 10,
  'Запальник не разжегся': 11,
  'Пламя запальника погасло': 12,
};

export const extraInfoMap = {
  'Клапан запальника': 13,
  'Искрообразование': 14,
  'Розжиг запальника': 15,
};

export const infoMap = {
  'Останов котла': 0,
  'Режим вентиляции': 1,
  'Режим стабилизации запальника': 2,
  'Розжиг горелки': 3,
  'Режим стабилизации горелки': 4,
  'Клапан отсекатель': 5,
  'Рабочий режим': 6,
  'Факел запальника': 7,
  'Пламя горелки': 8,
  'Работа дымососа': 9,
};

/**
 * Генерирует массив регистров из карты битов
 * @param {Object} bitMap - Карта битов { название: индекс_бита }
 * @param {number} address - Адрес регистра
 * @param {string} category - Категория
 * @returns {Array} Массив конфигураций регистров
 */
function generateBitRegisters(bitMap, address, category) {
  return Object.entries(bitMap).map(([key, bitIndex]) => ({
    key,
    category,
    type: 'holding',
    address,
    dataType: 'uint16',
    bitIndex
  }));
}

// Автоматическая генерация регистров из карт
export const statusRegisters = [
  ...generateBitRegisters(alarmsMap, 0x0000, 'alarms'),
  ...generateBitRegisters(extraInfoMap, 0x0000, 'info'),
  ...generateBitRegisters(infoMap, 0x0001, 'info')
];

